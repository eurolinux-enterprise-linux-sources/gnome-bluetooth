/*
 * Generated by gdbus-codegen 2.39.92. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __BLUETOOTH_CLIENT_GLUE_H__
#define __BLUETOOTH_CLIENT_GLUE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.Adapter1 */

#define TYPE_ADAPTER1 (adapter1_get_type ())
#define ADAPTER1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ADAPTER1, Adapter1))
#define IS_ADAPTER1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ADAPTER1))
#define ADAPTER1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ADAPTER1, Adapter1Iface))

struct _Adapter1;
typedef struct _Adapter1 Adapter1;
typedef struct _Adapter1Iface Adapter1Iface;

struct _Adapter1Iface
{
  GTypeInterface parent_iface;


  gboolean (*handle_remove_device) (
    Adapter1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_device);

  gboolean (*handle_start_discovery) (
    Adapter1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_stop_discovery) (
    Adapter1 *object,
    GDBusMethodInvocation *invocation);

  const gchar * (*get_address) (Adapter1 *object);

  const gchar * (*get_alias) (Adapter1 *object);

  guint  (*get_class) (Adapter1 *object);

  gboolean  (*get_discoverable) (Adapter1 *object);

  guint  (*get_discoverable_timeout) (Adapter1 *object);

  gboolean  (*get_discovering) (Adapter1 *object);

  const gchar * (*get_modalias) (Adapter1 *object);

  const gchar * (*get_name) (Adapter1 *object);

  gboolean  (*get_pairable) (Adapter1 *object);

  guint  (*get_pairable_timeout) (Adapter1 *object);

  gboolean  (*get_powered) (Adapter1 *object);

  const gchar *const * (*get_uuids) (Adapter1 *object);

};

GType adapter1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *adapter1_interface_info (void);
guint adapter1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void adapter1_complete_start_discovery (
    Adapter1 *object,
    GDBusMethodInvocation *invocation);

void adapter1_complete_stop_discovery (
    Adapter1 *object,
    GDBusMethodInvocation *invocation);

void adapter1_complete_remove_device (
    Adapter1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void adapter1_call_start_discovery (
    Adapter1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean adapter1_call_start_discovery_finish (
    Adapter1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean adapter1_call_start_discovery_sync (
    Adapter1 *proxy,
    GCancellable *cancellable,
    GError **error);

void adapter1_call_stop_discovery (
    Adapter1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean adapter1_call_stop_discovery_finish (
    Adapter1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean adapter1_call_stop_discovery_sync (
    Adapter1 *proxy,
    GCancellable *cancellable,
    GError **error);

void adapter1_call_remove_device (
    Adapter1 *proxy,
    const gchar *arg_device,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean adapter1_call_remove_device_finish (
    Adapter1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean adapter1_call_remove_device_sync (
    Adapter1 *proxy,
    const gchar *arg_device,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *adapter1_get_address (Adapter1 *object);
gchar *adapter1_dup_address (Adapter1 *object);
void adapter1_set_address (Adapter1 *object, const gchar *value);

const gchar *adapter1_get_name (Adapter1 *object);
gchar *adapter1_dup_name (Adapter1 *object);
void adapter1_set_name (Adapter1 *object, const gchar *value);

const gchar *adapter1_get_alias (Adapter1 *object);
gchar *adapter1_dup_alias (Adapter1 *object);
void adapter1_set_alias (Adapter1 *object, const gchar *value);

guint adapter1_get_class (Adapter1 *object);
void adapter1_set_class (Adapter1 *object, guint value);

gboolean adapter1_get_powered (Adapter1 *object);
void adapter1_set_powered (Adapter1 *object, gboolean value);

gboolean adapter1_get_discoverable (Adapter1 *object);
void adapter1_set_discoverable (Adapter1 *object, gboolean value);

guint adapter1_get_discoverable_timeout (Adapter1 *object);
void adapter1_set_discoverable_timeout (Adapter1 *object, guint value);

gboolean adapter1_get_pairable (Adapter1 *object);
void adapter1_set_pairable (Adapter1 *object, gboolean value);

guint adapter1_get_pairable_timeout (Adapter1 *object);
void adapter1_set_pairable_timeout (Adapter1 *object, guint value);

gboolean adapter1_get_discovering (Adapter1 *object);
void adapter1_set_discovering (Adapter1 *object, gboolean value);

const gchar *const *adapter1_get_uuids (Adapter1 *object);
gchar **adapter1_dup_uuids (Adapter1 *object);
void adapter1_set_uuids (Adapter1 *object, const gchar *const *value);

const gchar *adapter1_get_modalias (Adapter1 *object);
gchar *adapter1_dup_modalias (Adapter1 *object);
void adapter1_set_modalias (Adapter1 *object, const gchar *value);


/* ---- */

#define TYPE_ADAPTER1_PROXY (adapter1_proxy_get_type ())
#define ADAPTER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ADAPTER1_PROXY, Adapter1Proxy))
#define ADAPTER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ADAPTER1_PROXY, Adapter1ProxyClass))
#define ADAPTER1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ADAPTER1_PROXY, Adapter1ProxyClass))
#define IS_ADAPTER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ADAPTER1_PROXY))
#define IS_ADAPTER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ADAPTER1_PROXY))

typedef struct _Adapter1Proxy Adapter1Proxy;
typedef struct _Adapter1ProxyClass Adapter1ProxyClass;
typedef struct _Adapter1ProxyPrivate Adapter1ProxyPrivate;

struct _Adapter1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  Adapter1ProxyPrivate *priv;
};

struct _Adapter1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType adapter1_proxy_get_type (void) G_GNUC_CONST;

void adapter1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Adapter1 *adapter1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Adapter1 *adapter1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void adapter1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Adapter1 *adapter1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Adapter1 *adapter1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ADAPTER1_SKELETON (adapter1_skeleton_get_type ())
#define ADAPTER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ADAPTER1_SKELETON, Adapter1Skeleton))
#define ADAPTER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ADAPTER1_SKELETON, Adapter1SkeletonClass))
#define ADAPTER1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ADAPTER1_SKELETON, Adapter1SkeletonClass))
#define IS_ADAPTER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ADAPTER1_SKELETON))
#define IS_ADAPTER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ADAPTER1_SKELETON))

typedef struct _Adapter1Skeleton Adapter1Skeleton;
typedef struct _Adapter1SkeletonClass Adapter1SkeletonClass;
typedef struct _Adapter1SkeletonPrivate Adapter1SkeletonPrivate;

struct _Adapter1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  Adapter1SkeletonPrivate *priv;
};

struct _Adapter1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType adapter1_skeleton_get_type (void) G_GNUC_CONST;

Adapter1 *adapter1_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.Device1 */

#define TYPE_DEVICE1 (device1_get_type ())
#define DEVICE1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DEVICE1, Device1))
#define IS_DEVICE1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DEVICE1))
#define DEVICE1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_DEVICE1, Device1Iface))

struct _Device1;
typedef struct _Device1 Device1;
typedef struct _Device1Iface Device1Iface;

struct _Device1Iface
{
  GTypeInterface parent_iface;


  gboolean (*handle_cancel_pairing) (
    Device1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_connect) (
    Device1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_connect_profile) (
    Device1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_UUID);

  gboolean (*handle_disconnect) (
    Device1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_disconnect_profile) (
    Device1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_UUID);

  gboolean (*handle_pair) (
    Device1 *object,
    GDBusMethodInvocation *invocation);

  const gchar * (*get_adapter) (Device1 *object);

  const gchar * (*get_address) (Device1 *object);

  const gchar * (*get_alias) (Device1 *object);

  guint16  (*get_appearance) (Device1 *object);

  gboolean  (*get_blocked) (Device1 *object);

  guint  (*get_class) (Device1 *object);

  gboolean  (*get_connected) (Device1 *object);

  const gchar * (*get_icon) (Device1 *object);

  gboolean  (*get_legacy_pairing) (Device1 *object);

  const gchar * (*get_modalias) (Device1 *object);

  const gchar * (*get_name) (Device1 *object);

  gboolean  (*get_paired) (Device1 *object);

  gint16  (*get_rssi) (Device1 *object);

  gboolean  (*get_trusted) (Device1 *object);

  const gchar *const * (*get_uuids) (Device1 *object);

};

GType device1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *device1_interface_info (void);
guint device1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void device1_complete_disconnect (
    Device1 *object,
    GDBusMethodInvocation *invocation);

void device1_complete_connect (
    Device1 *object,
    GDBusMethodInvocation *invocation);

void device1_complete_connect_profile (
    Device1 *object,
    GDBusMethodInvocation *invocation);

void device1_complete_disconnect_profile (
    Device1 *object,
    GDBusMethodInvocation *invocation);

void device1_complete_pair (
    Device1 *object,
    GDBusMethodInvocation *invocation);

void device1_complete_cancel_pairing (
    Device1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void device1_call_disconnect (
    Device1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean device1_call_disconnect_finish (
    Device1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean device1_call_disconnect_sync (
    Device1 *proxy,
    GCancellable *cancellable,
    GError **error);

void device1_call_connect (
    Device1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean device1_call_connect_finish (
    Device1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean device1_call_connect_sync (
    Device1 *proxy,
    GCancellable *cancellable,
    GError **error);

void device1_call_connect_profile (
    Device1 *proxy,
    const gchar *arg_UUID,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean device1_call_connect_profile_finish (
    Device1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean device1_call_connect_profile_sync (
    Device1 *proxy,
    const gchar *arg_UUID,
    GCancellable *cancellable,
    GError **error);

void device1_call_disconnect_profile (
    Device1 *proxy,
    const gchar *arg_UUID,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean device1_call_disconnect_profile_finish (
    Device1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean device1_call_disconnect_profile_sync (
    Device1 *proxy,
    const gchar *arg_UUID,
    GCancellable *cancellable,
    GError **error);

void device1_call_pair (
    Device1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean device1_call_pair_finish (
    Device1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean device1_call_pair_sync (
    Device1 *proxy,
    GCancellable *cancellable,
    GError **error);

void device1_call_cancel_pairing (
    Device1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean device1_call_cancel_pairing_finish (
    Device1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean device1_call_cancel_pairing_sync (
    Device1 *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *device1_get_address (Device1 *object);
gchar *device1_dup_address (Device1 *object);
void device1_set_address (Device1 *object, const gchar *value);

const gchar *device1_get_name (Device1 *object);
gchar *device1_dup_name (Device1 *object);
void device1_set_name (Device1 *object, const gchar *value);

const gchar *device1_get_alias (Device1 *object);
gchar *device1_dup_alias (Device1 *object);
void device1_set_alias (Device1 *object, const gchar *value);

guint device1_get_class (Device1 *object);
void device1_set_class (Device1 *object, guint value);

guint16 device1_get_appearance (Device1 *object);
void device1_set_appearance (Device1 *object, guint16 value);

const gchar *device1_get_icon (Device1 *object);
gchar *device1_dup_icon (Device1 *object);
void device1_set_icon (Device1 *object, const gchar *value);

gboolean device1_get_paired (Device1 *object);
void device1_set_paired (Device1 *object, gboolean value);

gboolean device1_get_trusted (Device1 *object);
void device1_set_trusted (Device1 *object, gboolean value);

gboolean device1_get_blocked (Device1 *object);
void device1_set_blocked (Device1 *object, gboolean value);

gboolean device1_get_legacy_pairing (Device1 *object);
void device1_set_legacy_pairing (Device1 *object, gboolean value);

gint16 device1_get_rssi (Device1 *object);
void device1_set_rssi (Device1 *object, gint16 value);

gboolean device1_get_connected (Device1 *object);
void device1_set_connected (Device1 *object, gboolean value);

const gchar *const *device1_get_uuids (Device1 *object);
gchar **device1_dup_uuids (Device1 *object);
void device1_set_uuids (Device1 *object, const gchar *const *value);

const gchar *device1_get_modalias (Device1 *object);
gchar *device1_dup_modalias (Device1 *object);
void device1_set_modalias (Device1 *object, const gchar *value);

const gchar *device1_get_adapter (Device1 *object);
gchar *device1_dup_adapter (Device1 *object);
void device1_set_adapter (Device1 *object, const gchar *value);


/* ---- */

#define TYPE_DEVICE1_PROXY (device1_proxy_get_type ())
#define DEVICE1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DEVICE1_PROXY, Device1Proxy))
#define DEVICE1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_DEVICE1_PROXY, Device1ProxyClass))
#define DEVICE1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_DEVICE1_PROXY, Device1ProxyClass))
#define IS_DEVICE1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DEVICE1_PROXY))
#define IS_DEVICE1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_DEVICE1_PROXY))

typedef struct _Device1Proxy Device1Proxy;
typedef struct _Device1ProxyClass Device1ProxyClass;
typedef struct _Device1ProxyPrivate Device1ProxyPrivate;

struct _Device1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  Device1ProxyPrivate *priv;
};

struct _Device1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType device1_proxy_get_type (void) G_GNUC_CONST;

void device1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Device1 *device1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Device1 *device1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void device1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Device1 *device1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Device1 *device1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_DEVICE1_SKELETON (device1_skeleton_get_type ())
#define DEVICE1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DEVICE1_SKELETON, Device1Skeleton))
#define DEVICE1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_DEVICE1_SKELETON, Device1SkeletonClass))
#define DEVICE1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_DEVICE1_SKELETON, Device1SkeletonClass))
#define IS_DEVICE1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DEVICE1_SKELETON))
#define IS_DEVICE1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_DEVICE1_SKELETON))

typedef struct _Device1Skeleton Device1Skeleton;
typedef struct _Device1SkeletonClass Device1SkeletonClass;
typedef struct _Device1SkeletonPrivate Device1SkeletonPrivate;

struct _Device1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  Device1SkeletonPrivate *priv;
};

struct _Device1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType device1_skeleton_get_type (void) G_GNUC_CONST;

Device1 *device1_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.AgentManager1 */

#define TYPE_AGENT_MANAGER1 (agent_manager1_get_type ())
#define AGENT_MANAGER1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_AGENT_MANAGER1, AgentManager1))
#define IS_AGENT_MANAGER1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_AGENT_MANAGER1))
#define AGENT_MANAGER1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_AGENT_MANAGER1, AgentManager1Iface))

struct _AgentManager1;
typedef struct _AgentManager1 AgentManager1;
typedef struct _AgentManager1Iface AgentManager1Iface;

struct _AgentManager1Iface
{
  GTypeInterface parent_iface;

  gboolean (*handle_register_agent) (
    AgentManager1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_agent,
    const gchar *arg_capability);

  gboolean (*handle_request_default_agent) (
    AgentManager1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_agent);

  gboolean (*handle_unregister_agent) (
    AgentManager1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_agent);

};

GType agent_manager1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *agent_manager1_interface_info (void);
guint agent_manager1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void agent_manager1_complete_register_agent (
    AgentManager1 *object,
    GDBusMethodInvocation *invocation);

void agent_manager1_complete_unregister_agent (
    AgentManager1 *object,
    GDBusMethodInvocation *invocation);

void agent_manager1_complete_request_default_agent (
    AgentManager1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void agent_manager1_call_register_agent (
    AgentManager1 *proxy,
    const gchar *arg_agent,
    const gchar *arg_capability,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean agent_manager1_call_register_agent_finish (
    AgentManager1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean agent_manager1_call_register_agent_sync (
    AgentManager1 *proxy,
    const gchar *arg_agent,
    const gchar *arg_capability,
    GCancellable *cancellable,
    GError **error);

void agent_manager1_call_unregister_agent (
    AgentManager1 *proxy,
    const gchar *arg_agent,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean agent_manager1_call_unregister_agent_finish (
    AgentManager1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean agent_manager1_call_unregister_agent_sync (
    AgentManager1 *proxy,
    const gchar *arg_agent,
    GCancellable *cancellable,
    GError **error);

void agent_manager1_call_request_default_agent (
    AgentManager1 *proxy,
    const gchar *arg_agent,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean agent_manager1_call_request_default_agent_finish (
    AgentManager1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean agent_manager1_call_request_default_agent_sync (
    AgentManager1 *proxy,
    const gchar *arg_agent,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_AGENT_MANAGER1_PROXY (agent_manager1_proxy_get_type ())
#define AGENT_MANAGER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_AGENT_MANAGER1_PROXY, AgentManager1Proxy))
#define AGENT_MANAGER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_AGENT_MANAGER1_PROXY, AgentManager1ProxyClass))
#define AGENT_MANAGER1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_AGENT_MANAGER1_PROXY, AgentManager1ProxyClass))
#define IS_AGENT_MANAGER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_AGENT_MANAGER1_PROXY))
#define IS_AGENT_MANAGER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_AGENT_MANAGER1_PROXY))

typedef struct _AgentManager1Proxy AgentManager1Proxy;
typedef struct _AgentManager1ProxyClass AgentManager1ProxyClass;
typedef struct _AgentManager1ProxyPrivate AgentManager1ProxyPrivate;

struct _AgentManager1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  AgentManager1ProxyPrivate *priv;
};

struct _AgentManager1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType agent_manager1_proxy_get_type (void) G_GNUC_CONST;

void agent_manager1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
AgentManager1 *agent_manager1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
AgentManager1 *agent_manager1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void agent_manager1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
AgentManager1 *agent_manager1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
AgentManager1 *agent_manager1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_AGENT_MANAGER1_SKELETON (agent_manager1_skeleton_get_type ())
#define AGENT_MANAGER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_AGENT_MANAGER1_SKELETON, AgentManager1Skeleton))
#define AGENT_MANAGER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_AGENT_MANAGER1_SKELETON, AgentManager1SkeletonClass))
#define AGENT_MANAGER1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_AGENT_MANAGER1_SKELETON, AgentManager1SkeletonClass))
#define IS_AGENT_MANAGER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_AGENT_MANAGER1_SKELETON))
#define IS_AGENT_MANAGER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_AGENT_MANAGER1_SKELETON))

typedef struct _AgentManager1Skeleton AgentManager1Skeleton;
typedef struct _AgentManager1SkeletonClass AgentManager1SkeletonClass;
typedef struct _AgentManager1SkeletonPrivate AgentManager1SkeletonPrivate;

struct _AgentManager1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  AgentManager1SkeletonPrivate *priv;
};

struct _AgentManager1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType agent_manager1_skeleton_get_type (void) G_GNUC_CONST;

AgentManager1 *agent_manager1_skeleton_new (void);


G_END_DECLS

#endif /* __BLUETOOTH_CLIENT_GLUE_H__ */
